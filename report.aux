\relax 
\babel@aux{english}{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}The Bug}{1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces The buggy return type declaration for Math.expm1() in operation-typer.cc}}{2}}
\newlabel{fig:typer}{{1}{2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Code which determines whether Math.expm1() returns 0 or -0}}{2}}
\newlabel{fig:example1}{{2}{2}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Exploitation Techniques}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Triggering the Bug}{2}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces The first call to hax() correctly prints 'true', but the second prints 'false' because the buggy JIT optimization folds the entire Object.is call to 'false'.}}{3}}
\newlabel{fig:example2}{{3}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces First attempt at an out of bounds array access. This fails because the Object.is call folds to false, which prevents the out of bounds index.}}{3}}
\newlabel{fig:example3}{{4}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Triggering an Out-of-Bounds Array Access}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Patch and Resolution}{4}}
